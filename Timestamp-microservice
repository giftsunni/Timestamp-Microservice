// index.js
// where your node app starts

// Initialize the Timestamp MicroService
var express = require('express');
var app = express();

// Enable CORS
var cors = require('cors');
app.use(cors({ optionsSuccessStatus: 200 })); // Some legacy browsers choke on 204

// Static files
app.use(express.static('public'));

// Basic routing
app.get("/", function (req, res) {
  res.sendFile(__dirname + '/views/index.html');
});

// Helper function to check invalid dates
const isInvalidDate = (date) => date.toUTCString() === "Invalid Date";

// API endpoint for /api/:date?
app.get("/api/:date?", (req, res) => {
  const dateParam = req.params.date;

  let date;

  // Handle empty date parameter (current date)
  if (!dateParam) {
    date = new Date();
  } else {
    // Try to parse the date
    if (!isNaN(dateParam)) {
      // If it's a number, treat it as a Unix timestamp
      date = new Date(parseInt(dateParam));
    } else {
      // Otherwise, treat it as a date string
      date = new Date(dateParam);
    }
  }

  // Check if the date is invalid
  if (isInvalidDate(date)) {
    return res.json({ error: "Invalid Date" });
  }

  // Return the valid response
  res.json({
    unix: date.getTime(),
    utc: date.toUTCString()
  });
});

// Default API endpoint for current time
app.get("/api", (req, res) => {
  const now = new Date();
  res.json({
    unix: now.getTime(),
    utc: now.toUTCString()
  });
});

// Listen on port set in environment variable or default to 3000
var listener = app.listen(process.env.PORT || 3000, function () {
  console.log('Your app is listening on port ' + listener.address().port);
});
